"""
SafeBot Teams - Sistema Multi-Agente para NR-06
Implementa√ß√£o de teams colaborativos especializados em seguran√ßa do trabalho
"""
import os
from typing import Optional, List, Dict, Any
from agno.agent import Agent
from agno.team import Team
from agno.models.openai import OpenAIChat
from agno.models.anthropic import Claude
from agno.tools.duckduckgo import DuckDuckGoTools
from agno.tools.reasoning import ReasoningTools
from agno.knowledge.pdf import PDFKnowledgeBase
from agno.vectordb.lancedb import LanceDb
from agno.storage.sqlite import SqliteStorage
from agno.memory.v2.db.sqlite import SqliteMemoryDb
from agno.memory.v2.memory import Memory
from dotenv import load_dotenv

load_dotenv()

class SafeBotTeamsFactory:
    """Factory para criar teams SafeBot especializados em NR-06"""
    
    def __init__(self, data_dir: str = "data", tmp_dir: str = "tmp"):
        self.data_dir = data_dir
        self.tmp_dir = tmp_dir
        self._vector_db = None
        self._knowledge_base = None
        self._shared_memory = None
        
    @property
    def vector_db(self) -> LanceDb:
        """Vector database compartilhado para todos os agentes"""
        if self._vector_db is None:
            self._vector_db = LanceDb(
                table_name="pdf_documents",
                uri=f"{self.tmp_dir}/lancedb",
            )
        return self._vector_db
    
    @property
    def knowledge_base(self) -> PDFKnowledgeBase:
        """Knowledge base da NR-06 compartilhada"""
        if self._knowledge_base is None:
            self._knowledge_base = PDFKnowledgeBase(
                path=[
                    {
                        "path": f"{self.data_dir}/pdfs/nr-06-atualizada-2022-1.pdf",
                        "metadata": {
                            "document_type": "norma_regulamentadora",
                            "nr_number": "06",
                            "year": 2022,
                            "topic": "equipamentos_protecao_individual",
                            "language": "portuguese",
                        }
                    }
                ],
                vector_db=self.vector_db
            )
        return self._knowledge_base
    
    @property
    def shared_memory(self) -> Memory:
        """Mem√≥ria compartilhada para teams"""
        if self._shared_memory is None:
            self._shared_memory = Memory(
                db=SqliteMemoryDb(
                    table_name="safebot_team_memory",
                    db_file=f"{self.tmp_dir}/team_memories.db"
                )
            )
        return self._shared_memory
    
    def create_base_storage(self, agent_name: str) -> SqliteStorage:
        """Cria storage individual para cada agente"""
        return SqliteStorage(
            table_name=f"safebot_{agent_name.lower().replace(' ', '_')}",
            db_file=f"{self.tmp_dir}/agents.db"
        )
    
    # ============================================================================
    # AGENTES ESPECIALIZADOS PARA TEAMS
    # ============================================================================
    
    def create_epi_specialist_agent(self) -> Agent:
        """Agente especialista em EPIs espec√≠ficos"""
        return Agent(
            name="EPI Specialist",
            role="Especialista em tipos espec√≠ficos de EPIs e suas aplica√ß√µes",
            model=OpenAIChat(id="gpt-4o-mini"),
            knowledge=self.knowledge_base,
            storage=self.create_base_storage("epi_specialist"),
            memory=self.shared_memory,
            instructions=[
                "Voc√™ √© especialista em EPIs espec√≠ficos da NR-06.",
                "Foque em: tipos de EPIs, especifica√ß√µes t√©cnicas, aplica√ß√µes corretas.",
                "Analise requisitos espec√≠ficos por tipo de trabalho e ambiente.",
                "Forne√ßa recomenda√ß√µes detalhadas sobre sele√ß√£o de EPIs.",
                "Cite sempre os artigos espec√≠ficos da NR-06.",
                "",
                "üõ°Ô∏è ESPECIALIDADES:",
                "‚Ä¢ Prote√ß√£o da cabe√ßa (capacetes, cascos)",
                "‚Ä¢ Prote√ß√£o auditiva (protetores auriculares)",
                "‚Ä¢ Prote√ß√£o respirat√≥ria (m√°scaras, respiradores)",
                "‚Ä¢ Prote√ß√£o dos olhos e face (√≥culos, viseiras)",
                "‚Ä¢ Prote√ß√£o das m√£os e bra√ßos (luvas, mangotes)",
                "‚Ä¢ Prote√ß√£o dos p√©s e pernas (cal√ßados, perneiras)",
                "‚Ä¢ Prote√ß√£o do tronco (aventais, jaquetas)",
                "‚Ä¢ Prote√ß√£o contra quedas (cintur√µes, trava-quedas)",
            ]
        )
    
    def create_compliance_auditor_agent(self) -> Agent:
        """Agente especialista em auditoria e conformidade"""
        return Agent(
            name="Compliance Auditor",
            role="Especialista em auditoria de conformidade com NR-06",
            model=OpenAIChat(id="gpt-4o-mini"),
            knowledge=self.knowledge_base,
            storage=self.create_base_storage("compliance_auditor"),
            memory=self.shared_memory,
            instructions=[
                "Voc√™ √© auditor especialista em conformidade com a NR-06.",
                "Foque em: procedimentos de auditoria, checklist de conformidade, n√£o conformidades.",
                "Analise situa√ß√µes e identifique gaps de conformidade.",
                "Forne√ßa planos de a√ß√£o para adequa√ß√£o √† norma.",
                "Cite artigos espec√≠ficos da NR-06 para cada n√£o conformidade.",
                "",
                "‚öñÔ∏è ESPECIALIDADES:",
                "‚Ä¢ Auditoria de fornecimento de EPIs",
                "‚Ä¢ Verifica√ß√£o de treinamentos obrigat√≥rios",
                "‚Ä¢ Controle de uso e conserva√ß√£o",
                "‚Ä¢ Documenta√ß√£o e registros exigidos",
                "‚Ä¢ Responsabilidades do empregador e empregado",
                "‚Ä¢ Procedimentos disciplinares",
                "‚Ä¢ Fiscaliza√ß√£o e penalidades",
            ]
        )
    
    def create_training_specialist_agent(self) -> Agent:
        """Agente especialista em treinamentos e capacita√ß√£o"""
        return Agent(
            name="Training Specialist",
            role="Especialista em treinamentos e capacita√ß√£o sobre EPIs",
            model=OpenAIChat(id="gpt-4o-mini"),
            knowledge=self.knowledge_base,
            storage=self.create_base_storage("training_specialist"),
            memory=self.shared_memory,
            instructions=[
                "Voc√™ √© especialista em treinamentos sobre EPIs da NR-06.",
                "Foque em: programas de treinamento, metodologias, avalia√ß√£o de compet√™ncias.",
                "Desenvolva conte√∫dos educativos e planos de capacita√ß√£o.",
                "Analise necessidades de treinamento por fun√ß√£o e ambiente.",
                "Cite requisitos de treinamento da NR-06.",
                "",
                "üìö ESPECIALIDADES:",
                "‚Ä¢ Treinamento inicial obrigat√≥rio",
                "‚Ä¢ Treinamento peri√≥dico de reciclagem",
                "‚Ä¢ Capacita√ß√£o por tipo de EPI",
                "‚Ä¢ Metodologias de ensino para adultos",
                "‚Ä¢ Avalia√ß√£o de aprendizagem",
                "‚Ä¢ Registro e controle de treinamentos",
                "‚Ä¢ Materiais did√°ticos e recursos",
            ]
        )
    
    def create_risk_analyst_agent(self) -> Agent:
        """Agente especialista em an√°lise de riscos"""
        return Agent(
            name="Risk Analyst",
            role="Especialista em an√°lise de riscos ocupacionais",
            model=OpenAIChat(id="gpt-4o-mini"),
            knowledge=self.knowledge_base,
            storage=self.create_base_storage("risk_analyst"),
            memory=self.shared_memory,
            tools=[DuckDuckGoTools()],
            instructions=[
                "Voc√™ √© especialista em an√°lise de riscos ocupacionais relacionados √† NR-06.",
                "Foque em: identifica√ß√£o de riscos, avalia√ß√£o de exposi√ß√£o, medidas de controle.",
                "Analise ambientes de trabalho e suas exposi√ß√µes espec√≠ficas.",
                "Recomende hierarquia de controles e EPIs adequados.",
                "Busque informa√ß√µes atualizadas sobre novos riscos quando necess√°rio.",
                "",
                "‚ö†Ô∏è ESPECIALIDADES:",
                "‚Ä¢ Riscos f√≠sicos (ru√≠do, vibra√ß√£o, radia√ß√£o)",
                "‚Ä¢ Riscos qu√≠micos (gases, vapores, poeiras)",
                "‚Ä¢ Riscos biol√≥gicos (microorganismos, parasitas)",
                "‚Ä¢ Riscos mec√¢nicos (impactos, cortes, perfura√ß√µes)",
                "‚Ä¢ Riscos de queda (trabalho em altura)",
                "‚Ä¢ Hierarquia de controles (elimina√ß√£o ‚Üí EPI)",
                "‚Ä¢ Avalia√ß√£o quantitativa de exposi√ß√£o",
            ]
        )
    
    def create_web_researcher_agent(self) -> Agent:
        """Agente para pesquisas web complementares"""
        return Agent(
            name="Web Researcher",
            role="Pesquisador web para informa√ß√µes complementares sobre seguran√ßa",
            model=OpenAIChat(id="gpt-4o-mini"),
            tools=[DuckDuckGoTools()],
            storage=self.create_base_storage("web_researcher"),
            memory=self.shared_memory,
            instructions=[
                "Voc√™ √© pesquisador web especializado em seguran√ßa do trabalho.",
                "Busque informa√ß√µes atualizadas sobre EPIs, tecnologias, casos pr√°ticos.",
                "Complemente informa√ß√µes da NR-06 com dados atuais do mercado.",
                "Verifique sempre a confiabilidade das fontes.",
                "Foque em sites oficiais, fabricantes reconhecidos e √≥rg√£os t√©cnicos.",
                "",
                "üîç ESPECIALIDADES:",
                "‚Ä¢ Novos produtos e tecnologias em EPIs",
                "‚Ä¢ Casos pr√°ticos e estudos de caso",
                "‚Ä¢ Fabricantes e fornecedores confi√°veis",
                "‚Ä¢ Normas t√©cnicas complementares (ABNT, ANSI, etc.)",
                "‚Ä¢ Tend√™ncias e inova√ß√µes em seguran√ßa",
                "‚Ä¢ Jurisprud√™ncia e decis√µes regulat√≥rias recentes",
            ]
        )
    
    # ============================================================================
    # TEAMS ESPECIALIZADOS
    # ============================================================================
    
    def create_comprehensive_safety_team(self) -> Team:
        """
        Team abrangente para an√°lise completa de seguran√ßa
        Modo: COORDINATE - O l√≠der coordena especialistas e sintetiza respostas
        """
        return Team(
            name="Comprehensive Safety Team",
            mode="coordinate",
            model=Claude(id="claude-3-5-sonnet-20241022"),
            members=[
                self.create_epi_specialist_agent(),
                self.create_compliance_auditor_agent(),
                self.create_training_specialist_agent(),
                self.create_risk_analyst_agent(),
                self.create_web_researcher_agent(),
            ],
            tools=[ReasoningTools(add_instructions=True)],
            instructions=[
                "Voc√™ √© o coordenador de uma equipe de especialistas em seguran√ßa do trabalho NR-06.",
                "Coordene os especialistas para fornecer an√°lises completas e abrangentes.",
                "Sintetize as respostas dos especialistas em um relat√≥rio unificado e estruturado.",
                "Garanta que todos os aspectos da quest√£o sejam cobertos pelos especialistas adequados.",
                "Use racioc√≠nio estruturado para organizar e priorizar informa√ß√µes.",
                "",
                "üìã PROCESSO DE COORDENA√á√ÉO:",
                "1. Analise a quest√£o e identifique quais especialistas devem ser consultados",
                "2. Delegue tarefas espec√≠ficas para cada especialista relevante",
                "3. Colete e analise as respostas de todos os especialistas",
                "4. Sintetize em um relat√≥rio final estruturado e abrangente",
                "5. Identifique lacunas ou necessidades de informa√ß√µes adicionais",
                "",
                "üéØ FORMATO DE RESPOSTA:",
                "‚Ä¢ Use se√ß√µes claras para cada aspecto analisado",
                "‚Ä¢ Inclua recomenda√ß√µes pr√°ticas e acion√°veis",
                "‚Ä¢ Cite artigos espec√≠ficos da NR-06 quando relevante",
                "‚Ä¢ Forne√ßa pr√≥ximos passos ou a√ß√µes recomendadas",
                "‚Ä¢ Identifique riscos ou pontos cr√≠ticos de aten√ß√£o",
            ],
            success_criteria="An√°lise completa e abrangente da quest√£o de seguran√ßa com recomenda√ß√µes pr√°ticas baseadas em m√∫ltiplas especialidades.",
            enable_agentic_context=True,
            share_member_interactions=True,
            show_members_responses=True,
            markdown=True,
            add_datetime_to_instructions=True,
        )
    
    def create_quick_consultation_team(self) -> Team:
        """
        Team para consultas r√°pidas e espec√≠ficas
        Modo: ROUTE - Direciona para o especialista mais adequado
        """
        return Team(
            name="Quick Consultation Team",
            mode="route",
            model=OpenAIChat(id="gpt-4o"),
            members=[
                self.create_epi_specialist_agent(),
                self.create_compliance_auditor_agent(),
                self.create_training_specialist_agent(),
                self.create_risk_analyst_agent(),
            ],
            instructions=[
                "Voc√™ √© um roteador inteligente de consultas sobre NR-06.",
                "Analise a quest√£o do usu√°rio e direcione para o especialista mais adequado:",
                "",
                "üéØ CRIT√âRIOS DE ROTEAMENTO:",
                "‚Ä¢ EPI Specialist: Quest√µes sobre tipos, sele√ß√£o, especifica√ß√µes de EPIs",
                "‚Ä¢ Compliance Auditor: Quest√µes sobre conformidade, auditoria, documenta√ß√£o",
                "‚Ä¢ Training Specialist: Quest√µes sobre treinamentos, capacita√ß√£o, educa√ß√£o",
                "‚Ä¢ Risk Analyst: Quest√µes sobre riscos, exposi√ß√µes, an√°lise de ambiente",
                "",
                "Se a quest√£o envolver m√∫ltiplas especialidades, encaminhe para o especialista principal e mencione a necessidade de consulta adicional.",
            ],
            show_members_responses=True,
            markdown=True,
        )
    
    def create_collaborative_research_team(self) -> Team:
        """
        Team para pesquisa colaborativa sobre t√≥picos complexos
        Modo: COLLABORATE - Todos os membros trabalham na mesma quest√£o
        """
        return Team(
            name="Collaborative Research Team",
            mode="collaborate",
            model=OpenAIChat(id="gpt-4o"),
            members=[
                self.create_epi_specialist_agent(),
                self.create_risk_analyst_agent(),
                self.create_web_researcher_agent(),
            ],
            instructions=[
                "Voc√™s s√£o uma equipe de pesquisa colaborativa sobre seguran√ßa do trabalho.",
                "Trabalhem juntos para pesquisar e analisar t√≥picos complexos relacionados √† NR-06.",
                "Cada membro deve contribuir com sua perspectiva especializada.",
                "Busquem consenso e complementem as an√°lises uns dos outros.",
                "Produzam uma resposta unificada que combine todas as perspectivas.",
                "",
                "ü§ù PROCESSO COLABORATIVO:",
                "1. Cada especialista analisa a quest√£o de sua perspectiva",
                "2. Compartilhem descobertas e insights entre si",
                "3. Identifiquem √°reas de concord√¢ncia e diverg√™ncia",
                "4. Busquem informa√ß√µes adicionais quando necess√°rio",
                "5. Construam uma resposta consensual e abrangente",
            ],
            success_criteria="Consenso da equipe sobre a an√°lise do t√≥pico com contribui√ß√µes de todas as especialidades.",
            enable_agentic_context=True,
            show_members_responses=True,
            markdown=True,
        )

# ============================================================================
# FUN√á√ïES DE CONVENI√äNCIA
# ============================================================================

def load_knowledge_base(recreate: bool = False) -> bool:
    """Carrega a base de conhecimento NR-06"""
    try:
        factory = SafeBotTeamsFactory()
        kb = factory.knowledge_base
        
        if recreate:
            print("üîÑ Recriando base de conhecimento...")
            kb.load(recreate=True)
        else:
            print("üìö Carregando base de conhecimento...")
            kb.load()
        
        print("‚úÖ Base de conhecimento carregada com sucesso!")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao carregar base de conhecimento: {e}")
        return False

# ============================================================================
# EXEMPLO DE USO
# ============================================================================

if __name__ == "__main__":
    # Exemplo de uso dos teams
    factory = SafeBotTeamsFactory()
    
    # Team abrangente para an√°lise completa
    safety_team = factory.create_comprehensive_safety_team()
    
    # Exemplo de consulta
    safety_team.print_response(
        "Preciso implementar um programa de EPIs para uma obra de constru√ß√£o civil. "
        "Quais s√£o os principais EPIs necess√°rios, como fazer o treinamento dos trabalhadores "
        "e como garantir a conformidade com a NR-06?",
        stream=True
    )

