"""
NR-06 Operational Playground - Sistema Operacional para Equipamentos de Prote√ß√£o Individual
Casos de uso pr√°ticos baseados na Norma Regulamentadora 06
"""
from agno.agent import Agent
from agno.models.openai import OpenAIChat
from agno.playground import Playground
from agno.storage.sqlite import SqliteStorage
from agno.knowledge.pdf import PDFKnowledgeBase
from agno.vectordb.lancedb import LanceDb
from agno.tools.python import PythonTools
from agno.memory.v2.db.sqlite import SqliteMemoryDb
from agno.memory.v2.memory import Memory
from dotenv import load_dotenv

load_dotenv()

agent_storage: str = "tmp/agents.db"

# =============================================================================
# CONFIGURA√á√ÉO DE MEM√ìRIA E KNOWLEDGE BASE
# =============================================================================

# Vector database para knowledge base
vector_db = LanceDb(
    table_name="pdf_documents",
    uri="tmp/lancedb",
)

# Fun√ß√£o para criar mem√≥ria especializada para cada agente
def create_agent_memory(agent_name: str, memory_description: str):
    """Cria mem√≥ria espec√≠fica para cada agente especializado"""
    return Memory(
        model=OpenAIChat(id="gpt-4o-mini"),
        db=SqliteMemoryDb(
            table_name=f"{agent_name}_memories", 
            db_file="tmp/agent_memories.db"
        ),
        # Configura√ß√µes de mem√≥ria otimizadas
        delete_memories=False,  # Mant√©m hist√≥rico para aprendizado
        clear_memories=False,   # Preserva conhecimento acumulado
    )

pdf_knowledge_base = PDFKnowledgeBase(
    path=[
        {
            "path": "data/pdfs/nr-06-atualizada-2022-1.pdf",
            "metadata": {
                "document_type": "norma_regulamentadora",
                "nr_number": "06",
                "year": 2022,
                "topic": "equipamentos_protecao_individual",
                "language": "portuguese",
            },
        }
    ],
    vector_db=vector_db,
)

# =============================================================================
# AGENTES ESPECIALIZADOS EM CASOS OPERACIONAIS NR-06
# =============================================================================

# 1. AGENTE SELE√á√ÉO DE EPIs
epi_selector = Agent(
    name="üéØ Seletor de EPIs",
    model=OpenAIChat(id="gpt-4o-mini"),
    knowledge=pdf_knowledge_base,
    search_knowledge=True,
    memory=create_agent_memory("epi_selector", "Mem√≥ria de sele√ß√µes de EPIs e padr√µes de risco"),
    user_id="epi_specialist",  # ID para agrupar mem√≥rias
    instructions=[
        "Voc√™ √© especialista em SELE√á√ÉO DE EPIs conforme NR-06",
        "MEM√ìRIA: Lembre-se de sele√ß√µes anteriores para padr√µes similares de risco",
        "APRENDIZADO: Use experi√™ncias passadas para melhorar recomenda√ß√µes futuras",
        "PROCESSO: Analise os riscos ‚Üí Recomende EPIs espec√≠ficos ‚Üí Justifique legalmente",
        "FORMATO: Use tabela com colunas: Risco Identificado | EPI Recomendado | Artigo NR-06 | Observa√ß√µes",
        "DETALHES: Inclua tipo de CA, especifica√ß√µes t√©cnicas, periodicidade de troca",
        "FOCO: Seja pr√°tico e espec√≠fico para implementa√ß√£o imediata",
        "Sempre cite artigos espec√≠ficos da NR-06 que fundamentam a recomenda√ß√£o"
    ],
    storage=SqliteStorage(table_name="epi_selector", db_file=agent_storage),
    add_datetime_to_instructions=True,
    add_history_to_messages=True,
    num_history_responses=5,
    markdown=True,
)

# 2. AGENTE AUDITORIA DE CONFORMIDADE  
audit_agent = Agent(
    name="üìã Auditor NR-06",
    model=OpenAIChat(id="gpt-4o-mini"),
    knowledge=pdf_knowledge_base,
    search_knowledge=True,
    memory=create_agent_memory("audit_agent", "Mem√≥ria de auditorias, n√£o conformidades e padr√µes por setor"),
    user_id="audit_specialist",
    instructions=[
        "Voc√™ √© especialista em AUDITORIA DE CONFORMIDADE NR-06",
        "MEM√ìRIA: Lembre-se de auditorias anteriores e padr√µes de n√£o conformidade por setor",
        "APRENDIZADO: Use hist√≥rico para identificar pontos cr√≠ticos recorrentes",
        "PROCESSO: Gere checklists ‚Üí Classifique n√£o conformidades ‚Üí Sugira a√ß√µes corretivas",
        "FORMATO: Checklist numerado com: Item | Artigo NR-06 | Status | Criticidade | A√ß√£o Requerida",
        "CLASSIFICA√á√ÉO: Cr√≠tica (risco iminente) | Alta (30 dias) | M√©dia (60 dias) | Baixa (90 dias)",
        "PERSONALIZA√á√ÉO: Adapte por setor/atividade espec√≠fica baseado em experi√™ncias passadas",
        "Inclua prazos legais e consequ√™ncias do descumprimento"
    ],
    storage=SqliteStorage(table_name="audit_agent", db_file=agent_storage),
    add_datetime_to_instructions=True,
    add_history_to_messages=True,
    num_history_responses=5,
    markdown=True,
)

# 3. AGENTE TREINAMENTOS
training_agent = Agent(
    name="üéì Designer de Treinamentos",
    model=OpenAIChat(id="gpt-4o-mini"),
    knowledge=pdf_knowledge_base,
    search_knowledge=True,
    memory=create_agent_memory("training_agent", "Mem√≥ria de programas de treinamento e efetividade por cargo"),
    user_id="training_specialist",
    instructions=[
        "Voc√™ √© especialista em TREINAMENTOS DE EPIs conforme NR-06",
        "MEM√ìRIA: Lembre-se de programas anteriores e sua efetividade por cargo/setor",
        "EVOLU√á√ÉO: Aprimore treinamentos baseado no feedback e resultados passados",
        "PROCESSO: Analise fun√ß√£o ‚Üí Crie programa ‚Üí Gere conte√∫do ‚Üí Desenvolva avalia√ß√£o",
        "FORMATO: Programa com: Objetivos | Conte√∫do Program√°tico | Dura√ß√£o | Metodologia | Avalia√ß√£o",
        "CONTE√öDO: Base legal, tipos de EPI, uso correto, conserva√ß√£o, limita√ß√µes",
        "AVALIA√á√ÉO: Inclua 10 quest√µes pr√°ticas com gabarito",
        "Personalize por cargo/fun√ß√£o espec√≠fica citando artigos da NR-06"
    ],
    storage=SqliteStorage(table_name="training_agent", db_file=agent_storage),
    add_datetime_to_instructions=True,
    add_history_to_messages=True,
    num_history_responses=5,
    markdown=True,
)

# 4. AGENTE INVESTIGA√á√ÉO DE ACIDENTES
incident_agent = Agent(
    name="üîç Investigador de Acidentes",
    model=OpenAIChat(id="gpt-4o-mini"),
    knowledge=pdf_knowledge_base,
    search_knowledge=True,
    memory=create_agent_memory("incident_agent", "Mem√≥ria de acidentes investigados e padr√µes de causas"),
    user_id="incident_specialist",
    instructions=[
        "Voc√™ √© especialista em INVESTIGA√á√ÉO DE ACIDENTES relacionados a EPIs",
        "MEM√ìRIA: Lembre-se de acidentes similares e padr√µes de causas identificados",
        "PADR√ïES: Identifique tend√™ncias recorrentes para preven√ß√£o proativa",
        "PROCESSO: Analise o acidente ‚Üí Identifique falhas ‚Üí Determine responsabilidades ‚Üí Sugira preven√ß√£o",
        "AN√ÅLISE: Falhas em: sele√ß√£o, fornecimento, treinamento, uso, fiscaliza√ß√£o, manuten√ß√£o",
        "RESPONSABILIDADES: Cite artigos da NR-06 sobre obriga√ß√µes empregador/empregado",
        "FORMATO: Relat√≥rio estruturado para CAT com causas, respons√°veis e medidas preventivas",
        "FOCO: Preven√ß√£o de recorr√™ncia baseada na legisla√ß√£o e experi√™ncias anteriores"
    ],
    storage=SqliteStorage(table_name="incident_agent", db_file=agent_storage),
    add_datetime_to_instructions=True,
    add_history_to_messages=True,
    num_history_responses=5,
    markdown=True,
)

# 5. AGENTE CONSULTOR LEGAL
legal_agent = Agent(
    name="‚öñÔ∏è Consultor Legal NR-06",
    model=OpenAIChat(id="gpt-4o-mini"),
    knowledge=pdf_knowledge_base,
    search_knowledge=True,
    memory=create_agent_memory("legal_agent", "Mem√≥ria de consultas legais e interpreta√ß√µes jur√≠dicas"),
    user_id="legal_specialist",
    instructions=[
        "Voc√™ √© especialista em ASPECTOS LEGAIS da NR-06",
        "MEM√ìRIA: Lembre-se de consultas anteriores e interpreta√ß√µes jur√≠dicas estabelecidas",
        "CONSIST√äNCIA: Mantenha coer√™ncia nas orienta√ß√µes legais para casos similares",
        "PROCESSO: Identifique situa√ß√£o ‚Üí Cite base legal ‚Üí Explique responsabilidades ‚Üí Oriente a√ß√£o",
        "RESPONSABILIDADES: Diferencie claramente obriga√ß√µes empregador vs empregado",
        "CONSEQU√äNCIAS: Explique multas, san√ß√µes e implica√ß√µes trabalhistas",
        "FORMATO: Parecer legal estruturado com fundamenta√ß√£o na NR-06",
        "ORIENTA√á√ÉO: Forne√ßa passos pr√°ticos para regulariza√ß√£o baseados em casos anteriores"
    ],
    storage=SqliteStorage(table_name="legal_agent", db_file=agent_storage),
    add_datetime_to_instructions=True,
    add_history_to_messages=True,
    num_history_responses=5,
    markdown=True,
)

# 6. AGENTE GERADOR DE PROCEDIMENTOS
procedure_agent = Agent(
    name="üìù Gerador de POPs",
    model=OpenAIChat(id="gpt-4o-mini"),
    knowledge=pdf_knowledge_base,
    search_knowledge=True,
    memory=create_agent_memory("procedure_agent", "Mem√≥ria de procedimentos criados e melhores pr√°ticas"),
    user_id="procedure_specialist",
    tools=[PythonTools()],  # Para c√°lculos e formata√ß√£o
    instructions=[
        "Voc√™ √© especialista em PROCEDIMENTOS OPERACIONAIS para gest√£o de EPIs",
        "MEM√ìRIA: Lembre-se de procedimentos anteriores e adapta√ß√µes bem-sucedidas",
        "OTIMIZA√á√ÉO: Aprimore POPs baseado em implementa√ß√µes passadas e feedback",
        "PROCESSO: Analise necessidade ‚Üí Crie procedimento ‚Üí Inclua formul√°rios ‚Üí Defina controles",
        "PROCEDIMENTOS: Recebimento, distribui√ß√£o, treinamento, uso, manuten√ß√£o, substitui√ß√£o",
        "FORMATO: POP estruturado com: Objetivo | Respons√°veis | Procedimento | Registros | Anexos",
        "BASE LEGAL: Fundamente todos os passos em artigos da NR-06",
        "CONTROLES: Inclua indicadores e formas de monitoramento baseados em experi√™ncias anteriores"
    ],
    storage=SqliteStorage(table_name="procedure_agent", db_file=agent_storage),
    add_datetime_to_instructions=True,
    add_history_to_messages=True,
    num_history_responses=5,
    markdown=True,
)

# =============================================================================
# PLAYGROUND CONFIGURATION
# =============================================================================

# Lista de todos os agentes especializados
ALL_AGENTS = [
    epi_selector,      # Sele√ß√£o de EPIs
    audit_agent,       # Auditoria de conformidade
    training_agent,    # Treinamentos personalizados
    incident_agent,    # Investiga√ß√£o de acidentes
    legal_agent,       # Consultoria legal
    procedure_agent,   # Gera√ß√£o de POPs
]

playground_app = Playground(agents=ALL_AGENTS)
app = playground_app.get_app()

def load_knowledge_base():
    """Carrega a base de conhecimento da NR-06 (executar uma vez)"""
    print("üîÑ Carregando base de conhecimento da NR-06...")
    pdf_knowledge_base.load(recreate=True)
    print("‚úÖ Base de conhecimento carregada com sucesso!")

# =============================================================================
# HEALTH CHECK ENDPOINT (Requerido para produ√ß√£o)
# =============================================================================

@app.get("/health")
async def health_check():
    """Health check endpoint para monitoramento de produ√ß√£o"""
    return {
        "status": "healthy",
        "service": "nr06-playground",
        "agents_count": len(ALL_AGENTS),
        "knowledge_base": "loaded",
        "memory_enabled": True,
        "version": "1.0.0"
    }

@app.get("/")
async def root():
    """Root endpoint com informa√ß√µes do sistema"""
    return {
        "message": "üõ°Ô∏è NR-06 Operational Playground",
        "description": "Sistema operacional para Equipamentos de Prote√ß√£o Individual",
        "agents": [agent.name for agent in ALL_AGENTS],
        "playground_url": "/playground",
        "docs_url": "/docs"
    }

if __name__ == "__main__":
    import sys
    import os
    
    # Detectar ambiente
    environment = os.getenv("ENVIRONMENT", "development")
    
    if len(sys.argv) > 1 and sys.argv[1] == "load":
        load_knowledge_base()
    else:
        print("üõ°Ô∏è  NR-06 OPERATIONAL PLAYGROUND")
        print("=" * 50)
        print(f"üåç Environment: {environment}")
        print("üìö AGENTES ESPECIALIZADOS DISPON√çVEIS:")
        print("  üéØ Seletor de EPIs - Recomenda EPIs por risco")
        print("  üìã Auditor NR-06 - Gera checklists de auditoria")  
        print("  üéì Designer de Treinamentos - Cria programas de capacita√ß√£o")
        print("  üîç Investigador de Acidentes - Analisa acidentes com EPIs")
        print("  ‚öñÔ∏è  Consultor Legal - Esclarece aspectos legais")
        print("  üìù Gerador de POPs - Cria procedimentos operacionais")
        print("=" * 50)
        print("üí° Para carregar a base de conhecimento: python agent.py load")
        print("üöÄ Iniciando playground...")
        
        # Configura√ß√£o baseada no ambiente
        if environment == "production":
            # Produ√ß√£o: usar configura√ß√µes otimizadas
            playground_app.serve(
                app="playground:app", 
                host="0.0.0.0",
                port=8000,
                reload=False,
                access_log=True
            )
        else:
            # Desenvolvimento: usar reload
            playground_app.serve(
                app="playground:app", 
                reload=True,
                port=7777  # Porta padr√£o Agno para desenvolvimento
            )
