#!/bin/bash
# Script de deployment para NR-06 System
# Seguindo boas pr√°ticas oficiais do Agno

set -e  # Parar em caso de erro

echo "üõ°Ô∏è  NR-06 SYSTEM DEPLOYMENT"
echo "=" * 50

# Verificar se Docker est√° rodando
if ! docker info > /dev/null 2>&1; then
    echo "‚ùå Docker n√£o est√° rodando. Por favor, inicie o Docker Desktop."
    exit 1
fi

# Verificar vari√°veis de ambiente obrigat√≥rias
if [ -z "$OPENAI_API_KEY" ]; then
    echo "‚ùå OPENAI_API_KEY n√£o est√° definida"
    echo "üí° Execute: export OPENAI_API_KEY=your_api_key"
    exit 1
fi

echo "‚úÖ Pr√©-requisitos verificados"

# Fun√ß√£o para desenvolvimento local
deploy_local() {
    echo "üîß Deployment LOCAL (seguindo padr√£o Agno)"
    
    # Iniciar PgVector (imagem oficial Agno)
    echo "üì¶ Iniciando PgVector database..."
    docker run -d \
        -e POSTGRES_DB=ai \
        -e POSTGRES_USER=ai \
        -e POSTGRES_PASSWORD=ai \
        -e PGDATA=/var/lib/postgresql/data/pgdata \
        -v pgvolume:/var/lib/postgresql/data \
        -p 5532:5432 \
        --name pgvector \
        agnohq/pgvector:16 || echo "PgVector j√° est√° rodando"
    
    # Aguardar database estar pronto
    echo "‚è≥ Aguardando database estar pronto..."
    sleep 10
    
    # Carregar knowledge base
    echo "üìö Carregando knowledge base..."
    python playground.py load
    
    # Iniciar aplica√ß√£o
    echo "üöÄ Iniciando NR-06 Playground..."
    python playground.py
}

# Fun√ß√£o para produ√ß√£o com Docker Compose
deploy_production() {
    echo "üè≠ Deployment PRODU√á√ÉO (Docker Compose)"
    
    # Build da imagem
    echo "üî® Building production image..."
    docker-compose -f docker-compose.prod.yml build
    
    # Iniciar servi√ßos
    echo "üöÄ Iniciando servi√ßos de produ√ß√£o..."
    docker-compose -f docker-compose.prod.yml up -d
    
    # Aguardar servi√ßos estarem prontos
    echo "‚è≥ Aguardando servi√ßos estarem prontos..."
    sleep 30
    
    # Carregar knowledge base em produ√ß√£o
    echo "üìö Carregando knowledge base em produ√ß√£o..."
    docker-compose -f docker-compose.prod.yml exec nr06-playground python playground.py load
    
    # Mostrar status
    echo "üìä Status dos servi√ßos:"
    docker-compose -f docker-compose.prod.yml ps
    
    echo "‚úÖ Deployment conclu√≠do!"
    echo "üåê Aplica√ß√£o dispon√≠vel em: http://localhost:8000"
    echo "üìä Health check: http://localhost:8000/health"
    echo "üìñ API docs: http://localhost:8000/docs"
}

# Fun√ß√£o para AWS (usando padr√µes Agno CLI)
deploy_aws() {
    echo "‚òÅÔ∏è  Deployment AWS (seguindo padr√£o Agno)"
    echo "‚ö†Ô∏è  Este m√©todo requer configura√ß√£o do Agno CLI"
    echo "üìñ Consulte: https://docs.agno.com/workspaces/workspace-management/production-app"
    
    # Verificar se ag CLI est√° instalado
    if ! command -v ag &> /dev/null; then
        echo "‚ùå Agno CLI n√£o encontrado"
        echo "üí° Instale com: pip install agno-cli"
        exit 1
    fi
    
    # Build e deploy com Agno CLI
    echo "üî® Building production image para AWS..."
    ag ws up --env prd --infra aws --type image
    
    echo "üöÄ Deploying para AWS..."
    ag ws up --env prd --infra aws
    
    echo "‚úÖ Deployment AWS conclu√≠do!"
}

# Menu de op√ß√µes
case "${1:-local}" in
    "local")
        deploy_local
        ;;
    "production")
        deploy_production
        ;;
    "aws")
        deploy_aws
        ;;
    *)
        echo "Usage: $0 {local|production|aws}"
        echo ""
        echo "Op√ß√µes:"
        echo "  local      - Deployment local com PgVector"
        echo "  production - Deployment produ√ß√£o com Docker Compose"
        echo "  aws        - Deployment AWS com Agno CLI"
        exit 1
        ;;
esac
